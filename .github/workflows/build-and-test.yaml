name: (child) Build and Test steps

on:
  workflow_call:
    inputs:
      SYNC:
        required: false
        type: boolean
    secrets:
      CLIENT_SECRET:
        required: true

jobs:
  buildandtest:
    runs-on: windows-latest
    environment: dev
    env:
      FSI_PATH: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\CommonExtensions\Microsoft\FSharp\Tools\fsi.exe'
      DAXIF_PATH: 'src/Tools/Daxif'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.x

      - name: Add signtool.exe to path for build
        run: |
          $signtool = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin\" `
                        -Recurse -Filter signtool.exe `
                        | Where-Object { $_.FullName -match '\\x64\\' } `
                        | Sort-Object LastWriteTime -Descending `
                        | Select-Object -First 1 -ExpandProperty DirectoryName
          if (-not $signtool) {
            throw "signtool.exe (x64) was not found!"
          }
          echo "PATH=$signtool;${{ env.PATH }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "Located signtool at: $PATH"

      - name: Setup Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Restore dependencies
        run: dotnet restore

      - name: Update C# Context
        run: '& "$env:FSI_PATH" $env:DAXIF_PATH/GenerateDataverseDomain.fsx /mfaAppId="${{ vars.DATAVERSE_APP_ID }}" /mfaClientSecret="${{ secrets.CLIENT_SECRET }}" /method="ClientSecret"'

      - name: Update TS Context
        run: '& "$env:FSI_PATH" $env:DAXIF_PATH/GenerateTypeScriptContext.fsx /mfaAppId="${{ vars.DATAVERSE_APP_ID }}" /mfaClientSecret="${{ secrets.CLIENT_SECRET }}" /method="ClientSecret"'

      - name: Update test metadata
        run: '& "$env:FSI_PATH" $env:DAXIF_PATH/GenerateTestMetadata.fsx /mfaAppId="${{ vars.DATAVERSE_APP_ID }}" /mfaClientSecret="${{ secrets.CLIENT_SECRET }}" /method="ClientSecret"'

      - name: Build solution
        run: 'dotnet build --no-restore --configuration release'

      - name: Run tests
        run: 'dotnet test --no-build --configuration release'

      - name: Sync plugins
        if: ${{ inputs.SYNC == true }}
        run: '& "$env:FSI_PATH" $env:DAXIF_PATH/PluginSyncDev.fsx /mfaAppId="${{ vars.DATAVERSE_APP_ID }}" /mfaClientSecret="${{ secrets.CLIENT_SECRET }}" /method="ClientSecret"'

      - name: Sync web resources
        if: ${{ inputs.SYNC == true }}
        run: '& "$env:FSI_PATH" $env:DAXIF_PATH/WebResourceSyncDev.fsx /mfaAppId="${{ vars.DATAVERSE_APP_ID }}" /mfaClientSecret="${{ secrets.CLIENT_SECRET }}" /method="ClientSecret"'

      - name: Publish DAXIF artifact
        if: ${{ inputs.SYNC == true }}
        uses: actions/upload-artifact@v4
        with:
          name: daxif
          path: ${{ env.DAXIF_PATH }}
