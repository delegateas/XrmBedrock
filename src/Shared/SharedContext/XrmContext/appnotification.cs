//------------------------------------------------------------------------------
// <auto-generated>
//     Denne kode blev oprettet ved hjælp af et værktøj.
//     Runtime-version:4.0.30319.42000
//
//     Ændringer af denne fil kan resultere i ukorrekt funktion, og ændringerne mistes, hvis
//     koden oprettes igen.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;


namespace XrmBedrock.SharedContext {
    
    
    /// <summary>
    /// <para>Notification to be provided to a user.</para>
    /// <para>Display Name: Notification</para>
    /// </summary>
    [EntityLogicalName("appnotification")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class appnotification : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "appnotification";
        
        public const int EntityTypeCode = 10258;
        
        public appnotification() : 
                base(EntityLogicalName) {
        }
        
        public appnotification(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("title");
            }
        }
        
        [AttributeLogicalName("appnotificationid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("appnotificationid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Notification</para>
        /// </summary>
        [AttributeLogicalName("appnotificationid")]
        [DisplayName("Notification")]
        public Guid? appnotificationId {
            get {
                return GetAttributeValue<Guid?>("appnotificationid");
            }
            set {
                SetId("appnotificationid", value);
            }
        }
        
        /// <summary>
        /// <para>This field is not used</para>
        /// <para>Display Name: Model-driven app</para>
        /// </summary>
        [AttributeLogicalName("appmoduleid")]
        [DisplayName("Model-driven app")]
        public EntityReference AppModuleId {
            get {
                return GetAttributeValue<EntityReference>("appmoduleid");
            }
            set {
                SetAttributeValue("appmoduleid", value);
            }
        }
        
        /// <summary>
        /// <para>Body of the notification</para>
        /// <para>Display Name: Body</para>
        /// </summary>
        [AttributeLogicalName("body")]
        [DisplayName("Body")]
        [MaxLength(500)]
        public string Body {
            get {
                return GetAttributeValue<string>("body");
            }
            set {
                SetAttributeValue("body", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        [DisplayName("Created By")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        [DisplayName("Created On")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        [DisplayName("Created By (Delegate)")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Custom data for the notification that can be used by the notification card</para>
        /// <para>Display Name: Data</para>
        /// </summary>
        [AttributeLogicalName("data")]
        [DisplayName("Data")]
        public string Data {
            get {
                return GetAttributeValue<string>("data");
            }
            set {
                SetAttributeValue("data", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: IconType</para>
        /// </summary>
        [AttributeLogicalName("icontype")]
        [DisplayName("IconType")]
        public appnotification_IconType? IconType {
            get {
                return GetOptionSetValue<appnotification_IconType>("icontype");
            }
            set {
                SetOptionSetValue("icontype", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        [DisplayName("Import Sequence Number")]
        [Range(-2147483648, 2147483647)]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        [DisplayName("Modified By")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        [DisplayName("Modified On")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        [DisplayName("Modified By (Delegate)")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        [DisplayName("Record Created On")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        [DisplayName("Owner")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        [DisplayName("Owning Business Unit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        [DisplayName("Owning Team")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        [DisplayName("Owning User")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Partitioning will be based on owner and it is recommended to specify this field for all operations for performance reason</para>
        /// <para>Display Name: Partition Id</para>
        /// </summary>
        [AttributeLogicalName("partitionid")]
        [DisplayName("Partition Id")]
        [MaxLength(100)]
        public string PartitionId {
            get {
                return GetAttributeValue<string>("partitionid");
            }
            set {
                SetAttributeValue("partitionid", value);
            }
        }
        
        /// <summary>
        /// <para>Title for the notification</para>
        /// <para>Display Name: Title</para>
        /// </summary>
        [AttributeLogicalName("title")]
        [DisplayName("Title")]
        [MaxLength(256)]
        public string PrimaryNameField {
            get {
                return GetAttributeValue<string>("title");
            }
            set {
                SetAttributeValue("title", value);
            }
        }
        
        /// <summary>
        /// <para>Priority of the notification</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("priority")]
        [DisplayName("Priority")]
        public appnotification_Priority? Priority {
            get {
                return GetOptionSetValue<appnotification_Priority>("priority");
            }
            set {
                SetOptionSetValue("priority", value);
            }
        }
        
        /// <summary>
        /// <para>After the specified number of seconds the notification will be deleted</para>
        /// <para>Display Name: Expiry (seconds)</para>
        /// </summary>
        [AttributeLogicalName("ttlinseconds")]
        [DisplayName("Expiry (seconds)")]
        [Range(1, 2147483647)]
        public int? TTLInSeconds {
            get {
                return GetAttributeValue<int?>("ttlinseconds");
            }
            set {
                SetAttributeValue("ttlinseconds", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        [DisplayName("Time Zone Rule Version Number")]
        [Range(-1, 2147483647)]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Title for the notification</para>
        /// <para>Display Name: Title</para>
        /// </summary>
        [AttributeLogicalName("title")]
        [DisplayName("Title")]
        [MaxLength(256)]
        public string Title {
            get {
                return GetAttributeValue<string>("title");
            }
            set {
                SetAttributeValue("title", value);
            }
        }
        
        /// <summary>
        /// <para>Type of toast behavior for the notification</para>
        /// <para>Display Name: Toast Type</para>
        /// </summary>
        [AttributeLogicalName("toasttype")]
        [DisplayName("Toast Type")]
        public appnotification_ToastType? ToastType {
            get {
                return GetOptionSetValue<appnotification_ToastType>("toasttype");
            }
            set {
                SetOptionSetValue("toasttype", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        [DisplayName("UTC Conversion Time Zone Code")]
        [Range(-1, 2147483647)]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version Number</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        [DisplayName("Version Number")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_appnotification_createdby")]
        public SystemUser lk_appnotification_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_appnotification_createdby", null);
            }
            set {
                SetRelatedEntity("lk_appnotification_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_appnotification_createdonbehalfby")]
        public SystemUser lk_appnotification_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_appnotification_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_appnotification_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_appnotification_modifiedby")]
        public SystemUser lk_appnotification_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_appnotification_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_appnotification_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_appnotification_modifiedonbehalfby")]
        public SystemUser lk_appnotification_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_appnotification_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_appnotification_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_appnotification")]
        public SystemUser user_appnotification {
            get {
                return GetRelatedEntity<SystemUser>("user_appnotification", null);
            }
            set {
                SetRelatedEntity("user_appnotification", null, value);
            }
        }
        
        public static appnotification Retrieve(IOrganizationService service, Guid id, params Expression<Func<appnotification,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
        
        /// <summary>
        /// <para>Retrieves the record using the alternate key called 'Entity key for NoSql Entity that contains PrimaryKey and PartitionId attributes'</para>
        /// </summary>
        public static appnotification Retrieve_KeyForNoSqlEntityWithPKPartitionId(IOrganizationService service, Guid appnotificationId, string PartitionId, params Expression<Func<appnotification,object>>[] attrs) {
            KeyAttributeCollection keys = new KeyAttributeCollection();
            keys.Add("appnotificationid", appnotificationId);
            keys.Add("partitionid", PartitionId);
            return Retrieve_AltKey(service, keys, attrs);
        }
        
        /// <summary>
        /// <para>Set values for the alternate key called 'Entity key for NoSql Entity that contains PrimaryKey and PartitionId attributes'</para>
        /// </summary>
        public void AltKey_KeyForNoSqlEntityWithPKPartitionId(Guid appnotificationId, string PartitionId) {
            KeyAttributes.Clear();
            KeyAttributes.Add("appnotificationid", appnotificationId);
            KeyAttributes.Add("partitionid", PartitionId);
        }
    }
    
    [DataContract()]
    public enum appnotification_IconType {
        
        [EnumMember()]
        [OptionSetMetadata("Info", Index=0, Lcid=1033, Color="#0000ff")]
        Info = 100000000,
        
        [EnumMember()]
        [OptionSetMetadata("Success", Index=1, Lcid=1033, Color="#0000ff")]
        Success = 100000001,
        
        [EnumMember()]
        [OptionSetMetadata("Failure", Index=2, Lcid=1033, Color="#0000ff")]
        Failure = 100000002,
        
        [EnumMember()]
        [OptionSetMetadata("Warning", Index=3, Lcid=1033, Color="#0000ff")]
        Warning = 100000003,
        
        [EnumMember()]
        [OptionSetMetadata("Mention", Index=4, Lcid=1033, Color="#0000ff")]
        Mention = 100000004,
        
        [EnumMember()]
        [OptionSetMetadata("Custom", Index=5, Lcid=1033, Color="#0000ff")]
        Custom = 100000005,
    }
    
    [DataContract()]
    public enum appnotification_Priority {
        
        [EnumMember()]
        [OptionSetMetadata("Normal", Index=0, Lcid=1033, Color="#0000ff")]
        Normal = 200000000,
        
        [EnumMember()]
        [OptionSetMetadata("High", Index=1, Lcid=1033, Color="#0000ff")]
        High = 200000001,
    }
    
    [DataContract()]
    public enum appnotification_ToastType {
        
        [EnumMember()]
        [OptionSetMetadata("Timed", Index=0, Lcid=1033, Description="Toast will fade out after the time out configured by the user", Color="#0000ff")]
        Timed = 200000000,
        
        [EnumMember()]
        [OptionSetMetadata("Hidden", Index=1, Lcid=1033, Description="Toast will not show but the notification will still be displayed in notification " +
            "center", Color="#0000ff")]
        Hidden = 200000001,
    }
}
