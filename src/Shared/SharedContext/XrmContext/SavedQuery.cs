//------------------------------------------------------------------------------
// <auto-generated>
//     Denne kode blev oprettet ved hjælp af et værktøj.
//     Runtime-version:4.0.30319.42000
//
//     Ændringer af denne fil kan resultere i ukorrekt funktion, og ændringerne mistes, hvis
//     koden oprettes igen.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;


namespace XrmBedrock.SharedContext {
    
    
    /// <summary>
    /// <para>Saved query against the database.</para>
    /// <para>Display Name: View</para>
    /// </summary>
    [EntityLogicalName("savedquery")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class SavedQuery : ExtendedEntity<SavedQueryState, SavedQuery_StatusCode> {
        
        public const string EntityLogicalName = "savedquery";
        
        public const int EntityTypeCode = 1039;
        
        public SavedQuery() : 
                base(EntityLogicalName) {
        }
        
        public SavedQuery(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("savedqueryid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("savedqueryid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the view.</para>
        /// <para>Display Name: View</para>
        /// </summary>
        [AttributeLogicalName("savedqueryid")]
        [DisplayName("View")]
        public Guid? SavedQueryId {
            get {
                return GetAttributeValue<Guid?>("savedqueryid");
            }
            set {
                SetId("savedqueryid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the column name that will be used to group the results from the data collected across multiple records from a system view.</para>
        /// <para>Display Name: Advanced Group By</para>
        /// </summary>
        [AttributeLogicalName("advancedgroupby")]
        [DisplayName("Advanced Group By")]
        [MaxLength(2000)]
        public string AdvancedGroupBy {
            get {
                return GetAttributeValue<string>("advancedgroupby");
            }
            set {
                SetAttributeValue("advancedgroupby", value);
            }
        }
        
        /// <summary>
        /// <para>Tells whether the view can be deleted.</para>
        /// <para>Display Name: Can Be Deleted</para>
        /// </summary>
        [AttributeLogicalName("canbedeleted")]
        [DisplayName("Can Be Deleted")]
        public BooleanManagedProperty CanBeDeleted {
            get {
                return GetAttributeValue<BooleanManagedProperty>("canbedeleted");
            }
            set {
                SetAttributeValue("canbedeleted", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the columns and sorting criteria for the view, stored in XML format.</para>
        /// <para>Display Name: Column Set XML</para>
        /// </summary>
        [AttributeLogicalName("columnsetxml")]
        [DisplayName("Column Set XML")]
        public string ColumnSetXml {
            get {
                return GetAttributeValue<string>("columnsetxml");
            }
            set {
                SetAttributeValue("columnsetxml", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Component State</para>
        /// </summary>
        [AttributeLogicalName("componentstate")]
        [DisplayName("Component State")]
        public componentstate? ComponentState {
            get {
                return GetOptionSetValue<componentstate>("componentstate");
            }
        }
        
        /// <summary>
        /// <para>Type information about how the items in the system view are formatted.</para>
        /// <para>Display Name: Conditional formatting</para>
        /// </summary>
        [AttributeLogicalName("conditionalformatting")]
        [DisplayName("Conditional formatting")]
        public string ConditionalFormatting {
            get {
                return GetAttributeValue<string>("conditionalformatting");
            }
            set {
                SetAttributeValue("conditionalformatting", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        [DisplayName("Created By")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        [DisplayName("Created On")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        [DisplayName("Created By (Delegate)")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the view, such as the filter criteria or intended results set.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        [DisplayName("Description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Tells whether the view can retrieve data from all cluster partitions.</para>
        /// <para>Display Name: Default</para>
        /// </summary>
        [AttributeLogicalName("enablecrosspartition")]
        [DisplayName("Default")]
        public bool? EnableCrossPartition {
            get {
                return GetAttributeValue<bool?>("enablecrosspartition");
            }
            set {
                SetAttributeValue("enablecrosspartition", value);
            }
        }
        
        /// <summary>
        /// <para>String specifying the query in Fetch XML language.</para>
        /// <para>Display Name: Fetch XML</para>
        /// </summary>
        [AttributeLogicalName("fetchxml")]
        [DisplayName("Fetch XML")]
        public string FetchXml {
            get {
                return GetAttributeValue<string>("fetchxml");
            }
            set {
                SetAttributeValue("fetchxml", value);
            }
        }
        
        /// <summary>
        /// <para>Version in which the form is introduced.</para>
        /// <para>Display Name: Introduced Version</para>
        /// </summary>
        [AttributeLogicalName("introducedversion")]
        [DisplayName("Introduced Version")]
        [MaxLength(48)]
        public string IntroducedVersion {
            get {
                return GetAttributeValue<string>("introducedversion");
            }
            set {
                SetAttributeValue("introducedversion", value);
            }
        }
        
        /// <summary>
        /// <para>Tells whether a user created the view.</para>
        /// <para>Display Name: Is Custom</para>
        /// </summary>
        [AttributeLogicalName("iscustom")]
        [DisplayName("Is Custom")]
        public bool? IsCustom {
            get {
                return GetAttributeValue<bool?>("iscustom");
            }
        }
        
        /// <summary>
        /// <para>Tells whether the component can be customized.</para>
        /// <para>Display Name: Customizable</para>
        /// </summary>
        [AttributeLogicalName("iscustomizable")]
        [DisplayName("Customizable")]
        public BooleanManagedProperty IsCustomizable {
            get {
                return GetAttributeValue<BooleanManagedProperty>("iscustomizable");
            }
            set {
                SetAttributeValue("iscustomizable", value);
            }
        }
        
        /// <summary>
        /// <para>Tells whether the view is the default view for the specified record type (entity).</para>
        /// <para>Display Name: Default</para>
        /// </summary>
        [AttributeLogicalName("isdefault")]
        [DisplayName("Default")]
        public bool? IsDefault {
            get {
                return GetAttributeValue<bool?>("isdefault");
            }
            set {
                SetAttributeValue("isdefault", value);
            }
        }
        
        /// <summary>
        /// <para>Tells whether the record is part of a managed solution.</para>
        /// <para>Display Name: State</para>
        /// </summary>
        [AttributeLogicalName("ismanaged")]
        [DisplayName("State")]
        public bool? IsManaged {
            get {
                return GetAttributeValue<bool?>("ismanaged");
            }
        }
        
        /// <summary>
        /// <para>Indicates whether or not this is viewable by the entire organization.</para>
        /// <para>Display Name: Is Private</para>
        /// </summary>
        [AttributeLogicalName("isprivate")]
        [DisplayName("Is Private")]
        public bool? IsPrivate {
            get {
                return GetAttributeValue<bool?>("isprivate");
            }
        }
        
        /// <summary>
        /// <para>Choose whether the view is compatible with Quick Find. When users search for specific items, you define the fields that are searched in.</para>
        /// <para>Display Name: Quick Find Compatible</para>
        /// </summary>
        [AttributeLogicalName("isquickfindquery")]
        [DisplayName("Quick Find Compatible")]
        public bool? IsQuickFindQuery {
            get {
                return GetAttributeValue<bool?>("isquickfindquery");
            }
            set {
                SetAttributeValue("isquickfindquery", value);
            }
        }
        
        /// <summary>
        /// <para>Tells whether the view was created by a user.</para>
        /// <para>Display Name: User Defined</para>
        /// </summary>
        [AttributeLogicalName("isuserdefined")]
        [DisplayName("User Defined")]
        public bool? IsUserDefined {
            get {
                return GetAttributeValue<bool?>("isuserdefined");
            }
        }
        
        /// <summary>
        /// <para>Layout data in JSON format.</para>
        /// <para>Display Name: Layout data in JSON format.</para>
        /// </summary>
        [AttributeLogicalName("layoutjson")]
        [DisplayName("Layout data in JSON format.")]
        public string LayoutJson {
            get {
                return GetAttributeValue<string>("layoutjson");
            }
            set {
                SetAttributeValue("layoutjson", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Layout XML</para>
        /// </summary>
        [AttributeLogicalName("layoutxml")]
        [DisplayName("Layout XML")]
        public string LayoutXml {
            get {
                return GetAttributeValue<string>("layoutxml");
            }
            set {
                SetAttributeValue("layoutxml", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        [DisplayName("Modified By")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        [DisplayName("Modified On")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        [DisplayName("Modified By (Delegate)")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type a name for the view to describe what results the view will contain. This name is visible to users in the View list.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        [DisplayName("Name")]
        [MaxLength(200)]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>String specifying the corresponding sql query for the fetch xml specified for offline use.</para>
        /// <para>Display Name: Offline SQL Query</para>
        /// </summary>
        [AttributeLogicalName("offlinesqlquery")]
        [DisplayName("Offline SQL Query")]
        public string OfflineSqlQuery {
            get {
                return GetAttributeValue<string>("offlinesqlquery");
            }
            set {
                SetAttributeValue("offlinesqlquery", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the ID of the organization that the record is associated with.</para>
        /// <para>Display Name: Organization</para>
        /// </summary>
        [AttributeLogicalName("organizationid")]
        [DisplayName("Organization")]
        public EntityReference OrganizationId {
            get {
                return GetAttributeValue<EntityReference>("organizationid");
            }
        }
        
        /// <summary>
        /// <para>For the organization, type the tab order to determine how users navigate through the screen using only the Tab key.</para>
        /// <para>Display Name: Default Organization tab order</para>
        /// </summary>
        [AttributeLogicalName("organizationtaborder")]
        [DisplayName("Default Organization tab order")]
        [Range(0, 2147483647)]
        public int? OrganizationTabOrder {
            get {
                return GetAttributeValue<int?>("organizationtaborder");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Record Overwrite Time</para>
        /// </summary>
        [AttributeLogicalName("overwritetime")]
        [DisplayName("Record Overwrite Time")]
        public DateTime? OverwriteTime {
            get {
                return GetAttributeValue<DateTime?>("overwritetime");
            }
        }
        
        /// <summary>
        /// <para>Type a name for the view to describe what results the view will contain. This name is visible to users in the View list.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        [DisplayName("Name")]
        [MaxLength(200)]
        public string PrimaryNameField {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Query API</para>
        /// </summary>
        [AttributeLogicalName("queryapi")]
        [DisplayName("Query API")]
        [MaxLength(100)]
        public string QueryAPI {
            get {
                return GetAttributeValue<string>("queryapi");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Query Application Usage</para>
        /// </summary>
        [AttributeLogicalName("queryappusage")]
        [DisplayName("Query Application Usage")]
        [Range(0, 1000000000)]
        public int? QueryAppUsage {
            get {
                return GetAttributeValue<int?>("queryappusage");
            }
            set {
                SetAttributeValue("queryappusage", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the type of the query.</para>
        /// <para>Display Name: Query Type</para>
        /// </summary>
        [AttributeLogicalName("querytype")]
        [DisplayName("Query Type")]
        [Range(0, 1000000000)]
        public int? QueryType {
            get {
                return GetAttributeValue<int?>("querytype");
            }
            set {
                SetAttributeValue("querytype", value);
            }
        }
        
        /// <summary>
        /// <para>Type of entity displayed in the view.</para>
        /// <para>Display Name: Entity Name</para>
        /// </summary>
        [AttributeLogicalName("returnedtypecode")]
        [DisplayName("Entity Name")]
        public string ReturnedTypeCode {
            get {
                return GetAttributeValue<string>("returnedtypecode");
            }
            set {
                SetAttributeValue("returnedtypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the role display conditions for the SavedQuery.</para>
        /// <para>Display Name: Role display conditions for the SavedQuery</para>
        /// </summary>
        [AttributeLogicalName("roledisplayconditionsxml")]
        [DisplayName("Role display conditions for the SavedQuery")]
        public string RoleDisplayConditionsXml {
            get {
                return GetAttributeValue<string>("roledisplayconditionsxml");
            }
            set {
                SetAttributeValue("roledisplayconditionsxml", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// </summary>
        [AttributeLogicalName("savedqueryidunique")]
        public Guid? SavedQueryIdUnique {
            get {
                return GetAttributeValue<Guid?>("savedqueryidunique");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the associated solution.</para>
        /// <para>Display Name: Solution</para>
        /// </summary>
        [AttributeLogicalName("solutionid")]
        [DisplayName("Solution")]
        public Guid? SolutionId {
            get {
                return GetAttributeValue<Guid?>("solutionid");
            }
        }
        
        /// <summary>
        /// <para>Shows the status of the view.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        [DisplayName("Status")]
        public SavedQueryState? StateCode {
            get {
                return GetOptionSetValue<SavedQueryState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the reason code that explains the status of the record.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        [DisplayName("Status Reason")]
        public SavedQuery_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<SavedQuery_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the view.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        [DisplayName("Version Number")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_savedquery_createdonbehalfby")]
        public SystemUser lk_savedquery_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_savedquery_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_savedquery_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_savedquery_modifiedonbehalfby")]
        public SystemUser lk_savedquery_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_savedquery_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_savedquery_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_savedquerybase_createdby")]
        public SystemUser lk_savedquerybase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_savedquerybase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_savedquerybase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_savedquerybase_modifiedby")]
        public SystemUser lk_savedquerybase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_savedquerybase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_savedquerybase_modifiedby", null, value);
            }
        }
        
        public static SavedQuery Retrieve(IOrganizationService service, Guid id, params Expression<Func<SavedQuery,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [DataContract()]
    public enum SavedQueryState {
        
        [EnumMember()]
        [OptionSetMetadata("Active", Index=0, Lcid=1033)]
        Active = 0,
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=1, Lcid=1033)]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum SavedQuery_StatusCode {
        
        [EnumMember()]
        [OptionSetMetadata("Active", Index=0, Lcid=1033)]
        Active = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Inactive", Index=1, Lcid=1033)]
        Inactive = 2,
    }
}
