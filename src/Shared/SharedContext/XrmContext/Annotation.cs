//------------------------------------------------------------------------------
// <auto-generated>
//     Denne kode blev oprettet ved hjælp af et værktøj.
//     Runtime-version:4.0.30319.42000
//
//     Ændringer af denne fil kan resultere i ukorrekt funktion, og ændringerne mistes, hvis
//     koden oprettes igen.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;


namespace XrmBedrock.SharedContext {
    
    
    /// <summary>
    /// <para>Note that is attached to one or more objects, including other notes.</para>
    /// <para>Display Name: Note</para>
    /// </summary>
    [EntityLogicalName("annotation")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Annotation : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "annotation";
        
        public const int EntityTypeCode = 5;
        
        public Annotation() : 
                base(EntityLogicalName) {
        }
        
        public Annotation(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("subject");
            }
        }
        
        [AttributeLogicalName("annotationid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("annotationid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the note.</para>
        /// <para>Display Name: Note</para>
        /// </summary>
        [AttributeLogicalName("annotationid")]
        [DisplayName("Note")]
        public Guid? AnnotationId {
            get {
                return GetAttributeValue<Guid?>("annotationid");
            }
            set {
                SetId("annotationid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the note.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        [DisplayName("Created By")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the note was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        [DisplayName("Created On")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the annotation.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        [DisplayName("Created By (Delegate)")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Contents of the note's attachment.</para>
        /// <para>Display Name: Document</para>
        /// </summary>
        [AttributeLogicalName("documentbody")]
        [DisplayName("Document")]
        [MaxLength(1073741823)]
        public string DocumentBody {
            get {
                return GetAttributeValue<string>("documentbody");
            }
            set {
                SetAttributeValue("documentbody", value);
            }
        }
        
        /// <summary>
        /// <para>File name of the note.</para>
        /// <para>Display Name: File Name</para>
        /// </summary>
        [AttributeLogicalName("filename")]
        [DisplayName("File Name")]
        [MaxLength(255)]
        public string FileName {
            get {
                return GetAttributeValue<string>("filename");
            }
            set {
                SetAttributeValue("filename", value);
            }
        }
        
        /// <summary>
        /// <para>File size of the note.</para>
        /// <para>Display Name: File Size (Bytes)</para>
        /// </summary>
        [AttributeLogicalName("filesize")]
        [DisplayName("File Size (Bytes)")]
        [Range(0, 1000000000)]
        public int? FileSize {
            get {
                return GetAttributeValue<int?>("filesize");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        [DisplayName("Import Sequence Number")]
        [Range(-2147483648, 2147483647)]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Specifies whether the note is an attachment.</para>
        /// <para>Display Name: Is Document</para>
        /// </summary>
        [AttributeLogicalName("isdocument")]
        [DisplayName("Is Document")]
        public bool? IsDocument {
            get {
                return GetAttributeValue<bool?>("isdocument");
            }
            set {
                SetAttributeValue("isdocument", value);
            }
        }
        
        /// <summary>
        /// <para>Language identifier for the note.</para>
        /// <para>Display Name: Language ID</para>
        /// </summary>
        [AttributeLogicalName("langid")]
        [DisplayName("Language ID")]
        [MaxLength(2)]
        public string LangId {
            get {
                return GetAttributeValue<string>("langid");
            }
            set {
                SetAttributeValue("langid", value);
            }
        }
        
        /// <summary>
        /// <para>MIME type of the note's attachment.</para>
        /// <para>Display Name: Mime Type</para>
        /// </summary>
        [AttributeLogicalName("mimetype")]
        [DisplayName("Mime Type")]
        [MaxLength(256)]
        public string MimeType {
            get {
                return GetAttributeValue<string>("mimetype");
            }
            set {
                SetAttributeValue("mimetype", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the note.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        [DisplayName("Modified By")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the note was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        [DisplayName("Modified On")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the annotation.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        [DisplayName("Modified By (Delegate)")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Text of the note.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("notetext")]
        [DisplayName("Description")]
        public string NoteText {
            get {
                return GetAttributeValue<string>("notetext");
            }
            set {
                SetAttributeValue("notetext", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the object with which the note is associated.</para>
        /// <para>Display Name: Regarding</para>
        /// </summary>
        [AttributeLogicalName("objectid")]
        [DisplayName("Regarding")]
        public EntityReference ObjectId {
            get {
                return GetAttributeValue<EntityReference>("objectid");
            }
            set {
                SetAttributeValue("objectid", value);
            }
        }
        
        /// <summary>
        /// <para>Type of entity with which the note is associated.</para>
        /// <para>Display Name: Object Type </para>
        /// </summary>
        [AttributeLogicalName("objecttypecode")]
        [DisplayName("Object Type ")]
        public string ObjectTypeCode {
            get {
                return GetAttributeValue<string>("objecttypecode");
            }
            set {
                SetAttributeValue("objecttypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        [DisplayName("Record Created On")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the note.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        [DisplayName("Owner")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the note.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        [DisplayName("Owning Business Unit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the note.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        [DisplayName("Owning Team")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the note.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        [DisplayName("Owning User")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Prefix of the file pointer in blob storage.</para>
        /// <para>Display Name: Prefix</para>
        /// </summary>
        [AttributeLogicalName("prefix")]
        [DisplayName("Prefix")]
        [MaxLength(10)]
        public string Prefix {
            get {
                return GetAttributeValue<string>("prefix");
            }
        }
        
        /// <summary>
        /// <para>Subject associated with the note.</para>
        /// <para>Display Name: Title</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        [DisplayName("Title")]
        [MaxLength(500)]
        public string PrimaryNameField {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>workflow step id associated with the note.</para>
        /// <para>Display Name: Step Id</para>
        /// </summary>
        [AttributeLogicalName("stepid")]
        [DisplayName("Step Id")]
        [MaxLength(32)]
        public string StepId {
            get {
                return GetAttributeValue<string>("stepid");
            }
            set {
                SetAttributeValue("stepid", value);
            }
        }
        
        /// <summary>
        /// <para>Subject associated with the note.</para>
        /// <para>Display Name: Title</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        [DisplayName("Title")]
        [MaxLength(500)]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the note.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        [DisplayName("Version Number")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Determines whether annotation record was autonomously created on conversation wrap up for the linked case record.</para>
        /// <para>Display Name: Is autonomously created</para>
        /// </summary>
        [AttributeLogicalName("isautonomouslycreated")]
        [DisplayName("Is autonomously created")]
        public bool? isAutonomouslyCreated {
            get {
                return GetAttributeValue<bool?>("isautonomouslycreated");
            }
            set {
                SetAttributeValue("isautonomouslycreated", value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("Account_Annotation")]
        public Account Account_Annotation {
            get {
                return GetRelatedEntity<Account>("Account_Annotation", null);
            }
            set {
                SetRelatedEntity("Account_Annotation", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("Contact_Annotation")]
        public Contact Contact_Annotation {
            get {
                return GetRelatedEntity<Contact>("Contact_Annotation", null);
            }
            set {
                SetRelatedEntity("Contact_Annotation", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("DuplicateRule_Annotation")]
        public DuplicateRule DuplicateRule_Annotation {
            get {
                return GetRelatedEntity<DuplicateRule>("DuplicateRule_Annotation", null);
            }
            set {
                SetRelatedEntity("DuplicateRule_Annotation", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("Task_Annotation")]
        public Task Task_Annotation {
            get {
                return GetRelatedEntity<Task>("Task_Annotation", null);
            }
            set {
                SetRelatedEntity("Task_Annotation", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("annotation_owning_user")]
        public SystemUser annotation_owning_user {
            get {
                return GetRelatedEntity<SystemUser>("annotation_owning_user", null);
            }
            set {
                SetRelatedEntity("annotation_owning_user", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_annotationbase_createdby")]
        public SystemUser lk_annotationbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_annotationbase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_annotationbase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_annotationbase_createdonbehalfby")]
        public SystemUser lk_annotationbase_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_annotationbase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_annotationbase_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_annotationbase_modifiedby")]
        public SystemUser lk_annotationbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_annotationbase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_annotationbase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_annotationbase_modifiedonbehalfby")]
        public SystemUser lk_annotationbase_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_annotationbase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_annotationbase_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("mgs_invoice_Annotations")]
        public mgs_Invoice mgs_invoice_Annotations {
            get {
                return GetRelatedEntity<mgs_Invoice>("mgs_invoice_Annotations", null);
            }
            set {
                SetRelatedEntity("mgs_invoice_Annotations", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("mgs_transaction_Annotations")]
        public mgs_Transaction mgs_transaction_Annotations {
            get {
                return GetRelatedEntity<mgs_Transaction>("mgs_transaction_Annotations", null);
            }
            set {
                SetRelatedEntity("mgs_transaction_Annotations", null, value);
            }
        }
        
        public static Annotation Retrieve(IOrganizationService service, Guid id, params Expression<Func<Annotation,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [DataContract()]
    public enum Annotation_ObjectTypeCode {
        
        [EnumMember()]
        [OptionSetMetadata("Account", Index=0, Lcid=1033)]
        Account = 1,
        
        [EnumMember()]
        [OptionSetMetadata("Contact", Index=11, Lcid=1033)]
        Contact = 2,
        
        [EnumMember()]
        [OptionSetMetadata("Opportunity", Index=21, Lcid=1033)]
        Opportunity = 3,
        
        [EnumMember()]
        [OptionSetMetadata("Lead", Index=18, Lcid=1033)]
        Lead = 4,
        
        [EnumMember()]
        [OptionSetMetadata("Case", Index=7, Lcid=1033)]
        Case = 112,
        
        [EnumMember()]
        [OptionSetMetadata("Competitor", Index=10, Lcid=1033)]
        Competitor = 123,
        
        [EnumMember()]
        [OptionSetMetadata("Contract", Index=12, Lcid=1033)]
        Contract = 1010,
        
        [EnumMember()]
        [OptionSetMetadata("Contract Line", Index=13, Lcid=1033)]
        ContractLine = 1011,
        
        [EnumMember()]
        [OptionSetMetadata("Product", Index=26, Lcid=1033)]
        Product = 1024,
        
        [EnumMember()]
        [OptionSetMetadata("Quote", Index=27, Lcid=1033)]
        Quote = 1084,
        
        [EnumMember()]
        [OptionSetMetadata("Order", Index=23, Lcid=1033)]
        Order = 1088,
        
        [EnumMember()]
        [OptionSetMetadata("Invoice", Index=17, Lcid=1033)]
        Invoice = 1090,
        
        [EnumMember()]
        [OptionSetMetadata("Facility/Equipment", Index=15, Lcid=1033)]
        FacilityEquipment = 4000,
        
        [EnumMember()]
        [OptionSetMetadata("Service", Index=30, Lcid=1033)]
        Service = 4001,
        
        [EnumMember()]
        [OptionSetMetadata("Calendar", Index=3, Lcid=1033)]
        Calendar = 4003,
        
        [EnumMember()]
        [OptionSetMetadata("Resource Specification", Index=29, Lcid=1033)]
        ResourceSpecification = 4006,
        
        [EnumMember()]
        [OptionSetMetadata("Appointment", Index=1, Lcid=1033)]
        Appointment = 4201,
        
        [EnumMember()]
        [OptionSetMetadata("Email", Index=14, Lcid=1033)]
        Email = 4202,
        
        [EnumMember()]
        [OptionSetMetadata("Fax", Index=16, Lcid=1033)]
        Fax = 4204,
        
        [EnumMember()]
        [OptionSetMetadata("Case Resolution", Index=8, Lcid=1033)]
        CaseResolution = 4206,
        
        [EnumMember()]
        [OptionSetMetadata("Letter", Index=19, Lcid=1033)]
        Letter = 4207,
        
        [EnumMember()]
        [OptionSetMetadata("Opportunity Close", Index=22, Lcid=1033)]
        OpportunityClose = 4208,
        
        [EnumMember()]
        [OptionSetMetadata("Order Close", Index=24, Lcid=1033)]
        OrderClose = 4209,
        
        [EnumMember()]
        [OptionSetMetadata("Phone Call", Index=25, Lcid=1033)]
        PhoneCall = 4210,
        
        [EnumMember()]
        [OptionSetMetadata("Quote Close", Index=28, Lcid=1033)]
        QuoteClose = 4211,
        
        [EnumMember()]
        [OptionSetMetadata("Task", Index=32, Lcid=1033)]
        Task = 4212,
        
        [EnumMember()]
        [OptionSetMetadata("Service Activity", Index=31, Lcid=1033)]
        ServiceActivity = 4214,
        
        [EnumMember()]
        [OptionSetMetadata("Commitment", Index=9, Lcid=1033)]
        Commitment = 4215,
        
        [EnumMember()]
        [OptionSetMetadata("Marketing List", Index=20, Lcid=1033)]
        MarketingList = 4300,
        
        [EnumMember()]
        [OptionSetMetadata("Campaign", Index=4, Lcid=1033)]
        Campaign = 4400,
        
        [EnumMember()]
        [OptionSetMetadata("Campaign Response", Index=6, Lcid=1033)]
        CampaignResponse = 4401,
        
        [EnumMember()]
        [OptionSetMetadata("Campaign Activity", Index=5, Lcid=1033)]
        CampaignActivity = 4402,
        
        [EnumMember()]
        [OptionSetMetadata("Bulk Import", Index=2, Lcid=1033)]
        BulkImport = 4407,
        
        [EnumMember()]
        [OptionSetMetadata("Routing Rule", Index=33, Lcid=1033)]
        RoutingRule = 8181,
        
        [EnumMember()]
        [OptionSetMetadata("Routing Rule Item", Index=34, Lcid=1033)]
        RoutingRuleItem = 8199,
    }
}
